"""
    Parses all files in discord_commands extracting the command and the
    object name for the command, then writes it to
    discord_commands/all_commands.py
"""

import os
import re


cmd_file_pattern = re.compile(r'[a-zA-Z0-9]*_command\.py')

def get_all_command_files():
    """Gets all files matching the cmd_file_pattern"""
    result = []
    for root, _, files in os.walk("discord_commands/"):
        # Skip __pycache__ folders
        if root.endswith('__pycache__'):
            continue

        for f in files:
            if cmd_file_pattern.match(f):
                result.append(root + "/" + f)

    return result

def build_all_commands(files):
    """
    Builds a dictionary of all of the commands

    :param files: list

    :return: dictionary of command to class name for the command
    """

    cmd_pattern = re.compile(r'self\._command = \"(![a-zA-Z0-9]*)\"')
    class_pattern = re.compile(r'class ([a-zA-Z0-9]*)\(')
    cmds = {}

    for f in files:
        command = class_name = ""
        for _, line in enumerate(open(f)):
            cmd_match = cmd_pattern.search(line)
            class_match = class_pattern.search(line)
            if cmd_match:
                command = cmd_match.group(1)

            if class_match:
                class_name = class_match.group(1)

        if class_name and command:
            cmds[command] = class_name

    return cmds

def write_new_all_commands(cmd_dict):
    """
    Writes a new all_commands.py using the commands given in cmd_dict

    :param cmd_dict: dict
    """
    f = open('discord_commands/all_commands.py', 'w')
    f.write('"""\nHouses a dictionary holding references to every command' + 'available\nThis file is generated by scripts/' +'update_all_commands.py\n"""')

    # Generate import lines
    imports = []


if __name__ == "__main__":
    cmd_files = get_all_command_files()
    commands = build_all_commands(cmd_files)
    write_new_all_commands(commands)
